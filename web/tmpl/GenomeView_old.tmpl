<style type="text/css">
	#map {
		height: 400;
		border: 1px solid black;
	}
	#zoomLevel {
		bottom: 10px;
		left: 0px;
	}
	#CNS {
		background-color:white;
		color:orange;
	}
	#gene_space {
		background-color: yellow;
		color:black;
	}
	#GEvo_links {
		color:yellow;
	}
	#gene {
		background-color: white;
		color:grey;
	}
	#local_dup {
		color:cyan;
	}
	#gc {
		background-color: white;
		color:blue;
	}
	#cg {
		background-color: green;
		color:white;
	}
	#gaga {
	    background-color: white;
	    color: red;
	}
	#gbox {
	    background-color: white;
	    color: blue;
	}
	#wobble_GC_usage {
		background-color: white;
	    color: purple;
	}
	#func_dom {
		color:orange;
	}
	#repeats {
		color:orange;
	}
	#other {
		color:orange;
	}
	#map_OpenLayers_ViewPort { /* mdb added 12/12/12 - tempfix for experiment layers out of view in control */
		overflow-y: auto !important;
	}
</style>

<script src="js/OpenLayers.js"></script>
<script src="js/Genomic.js"></script>
<script src="js/opengenes.js"></script>

<TMPL_INCLUDE NAME="widgets/JBrowse.tmpl">

<script type="text/javascript">
if(! window.console){ console={}; console.log = console.debug = function(){}}

var map, layers;
var chr = '<TMPL_VAR NAME=CHR>';
var version = '<TMPL_VAR NAME=VER>';
var bp;
var size= 285;
var server =
  [<TMPL_VAR NAME=TILE_SERVER>];

var org = "<TMPL_VAR NAME=ORG>";
var ds = '<TMPL_VAR NAME=DS>';
var dsg = '<TMPL_VAR NAME=DSG>';
var loc = '<TMPL_VAR NAME=LOC>';
var zoom = '<TMPL_VAR NAME=ZOOM>';
var gstid = '<TMPL_VAR NAME=GSTID>';

function init_GenomeView(){
	OpenLayers.Layer.Genomic.prototype.buffer = 1;
    map = new OpenLayers.GenomeBrowser( $('#map')[0] ,
    {
         maxExtent: new
         OpenLayers.Bounds(-500000,-10000,1000000000,10000),
         units     :'bp',
         tileSize: new OpenLayers.Size(768, size),
         resolutions:[4096, 2048, 1024,512,256,128,64,32,16,8,4,2,1, 0.5, 0.25, 0.125, 0.0625, 0.032125, 0.015625, 0.011711875],
          controls: [new OpenLayers.Control.MouseDefaults()]
    });
    layers = [
    new OpenLayers.Layer.Genomic( "Ruler" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid, 'chr':chr,layers:"background,ruler"}
         ,{isBaseLayer:true}
     ),
    ]

    map.addLayers(layers);

    gc = new OpenLayers.Layer.Genomic( "<span id='cg'>GC content</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"gc"}
         ,{isBaseLayer:false}
     );
    gaga = new OpenLayers.Layer.Genomic( "<span id='cg'>GAGA content</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"gaga"}
         ,{isBaseLayer:false}
     );
    gbox = new OpenLayers.Layer.Genomic( "<span id='cg'>G-Box CACGTG</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"gbox"}
         ,{isBaseLayer:false}
     );
    transposable = new OpenLayers.Layer.Genomic( "<span id='gc'>Transposable Elements</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"transposable",}
         ,{isBaseLayer:false}
     );

	<TMPL_VAR NAME=DYNAMIC_LAYERS>

    genes = new OpenLayers.Layer.Genomic( "<span id='gc'>Genes</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"pseudogene,gene,mRNA,CDS,rna,CNS",}
         ,{isBaseLayer:false}
     );
    GEvo_link = new OpenLayers.Layer.Genomic( "<span id='gc'>GEvo link for syntelogs</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"GEvo_link",}
         ,{isBaseLayer:false}
     );
	gene_space = new OpenLayers.Layer.Genomic( "<span id='gc'>Gene space</span>" , server
                   ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"gene_space",}
	                        ,{isBaseLayer:false}
				             );

    wobble_GC_usage = new OpenLayers.Layer.Genomic( "<span id='gc'>Wobble GC Usage</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"CDS,cbc"}
         ,{isBaseLayer:false}
     );
    wobble_GC_usage_first_50 = new OpenLayers.Layer.Genomic( "<span id='gc'>Wobble GC Usage (first 50 codons)</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"CDS,cbc50"}
         ,{isBaseLayer:false}
     );
    local_dup = new OpenLayers.Layer.Genomic( "<span id='gc'>Tandem Duplicates</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"local_dup",}
         ,{isBaseLayer:false}
     );

    prot = new OpenLayers.Layer.Genomic( "<span id='gc'>proteins</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"protein"}
         ,{isBaseLayer:false}
     );
    func_domain = new OpenLayers.Layer.Genomic( "<span id='gc'>Functional Domains</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"domain"}
         ,{isBaseLayer:false}
     );
    repeats = new OpenLayers.Layer.Genomic( "<span id='gc'>Repeat Regions</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"repeat"}
         ,{isBaseLayer:false}
    );
    other = new OpenLayers.Layer.Genomic( "<span id='gc'>Other Features</span>" , server
         ,{'ds':ds,'dsg':dsg,  'gstid':gstid,'chr':chr,layers:"other"}
         ,{isBaseLayer:false}
     );

    map.addControl(new OpenLayers.Control.LayerSwitcher());
    //$('#OpenLayers.Control.LayerSwitcher_68).css({'overflow':'scroll'});

    gc.setVisibility(<TMPL_VAR NAME="GC">);
    map.addLayer(gc);
    gaga.setVisibility(<TMPL_VAR NAME="GAGA">);
    map.addLayer(gaga);
    gbox.setVisibility(<TMPL_VAR NAME="GBOX">);
    map.addLayer(gbox);

    genes.setVisibility(<TMPL_VAR NAME="GENES">);
    map.addLayer(genes);

	<TMPL_VAR NAME="DYNAMIC_LAYERS_ADD">

	<TMPL_IF NAME="QUANT_LAYER">
    </TMPL_IF>

 	    <TMPL_IF NAME="TE_LAYER">
            transposable.setVisibility(<TMPL_VAR NAME="TE">);
            map.addLayer(transposable);
        </TMPL_IF>

 	    <TMPL_IF NAME="GEVO_LINK_LAYER">
            local_dup.setVisibility(<TMPL_VAR NAME="GEVO_LINK">);
            map.addLayer(GEvo_link);
            </TMPL_IF>

            wobble_GC_usage.setVisibility(<TMPL_VAR NAME="WOBBLEGC">);
            map.addLayer(wobble_GC_usage);

            wobble_GC_usage_first_50.setVisibility(<TMPL_VAR NAME="WOBBLE50GC">);
            map.addLayer(wobble_GC_usage_first_50);

	    <TMPL_IF NAME="GENE_SPACE_LAYER">
	    gene_space.setVisibility(<TMPL_VAR NAME="Gene_Space">);
            map.addLayer(gene_space);
            </TMPL_IF>

	    <TMPL_IF NAME="LOCAL_DUP_LAYER">
            local_dup.setVisibility(<TMPL_VAR NAME="LOCALDUP">);
            map.addLayer(local_dup);
            </TMPL_IF>

	    <TMPL_IF NAME="FUNC_DOMAIN_LAYER">
            func_domain.setVisibility(<TMPL_VAR NAME="FUNCDOMAIN">);
            map.addLayer(func_domain);
            </TMPL_IF>

	    <TMPL_IF NAME="REPEATS_LAYER">
            repeats.setVisibility(<TMPL_VAR NAME="REPEATS">);
            map.addLayer(repeats);
            </TMPL_IF>

            other.setVisibility(<TMPL_VAR NAME="OTHER">);
            map.addLayer(other);

            prot.setVisibility(<TMPL_VAR NAME="PROT">);
            map.addLayer(prot);
            /*                                          zoomLevel */
            map.setCenter(new OpenLayers.BasePair(loc), zoom);
            bp = new OpenLayers.Control.MousePosition()

            map.addControl(new OpenLayers.Control.PanZoomBar());
            map.addControl(bp );

            map.events.register('zoomend',map,updateZoom);
            map.events.triggerEvent('zoomend');

            map.events.register('mousedown',map,mapMouseDown);
            map.events.register('mouseup',map,mapMouseUp);
            map.events.register('mousemove',map,mapMouseMove);
            map.events.register('mouseout',map,mapMouseOut);
	    map.events.register('moveend',map,updateSliderPosition);
	    map.zoomOut();

	    /*CUSTOMIZATION FOR SPECIFIC DATASETS*/
            /*
            if(ds == '582'){
                OpenLayers.IMAGE_RELOAD_ATTEMPTS = 3;
                OpenLayers.Util.onImageLoadErrorColor = "transparent";
                var bs = ['http://128.32.8.28/rice_count/', 'http://kosh-370-311c-001-d.pmb.berkeley.edu/rice_count/'];
                map.addLayer( new OpenLayers.Layer.Genomic( "copy count" , bs
                              ,{'seqid': chr }
                               ,{isBaseLayer:false}
                                            ));

            }*/

            if(ds == '34474' || ds == '39598'){
                // avoid pink tiles
                OpenLayers.IMAGE_RELOAD_ATTEMPTS = 3;
                OpenLayers.Util.onImageLoadErrorColor = "transparent";

                var bs = ['http://128.32.8.28/bs/', 'http://kosh-370-311c-001-d.pmb.berkeley.edu/bs/'];
                var tome = ['http://128.32.8.28/salktome/', 'http://kosh-370-311c-001-d.pmb.berkeley.edu/salktome/'];

                map.addLayer( new OpenLayers.Layer.Genomic( "methylation" , bs
                              ,{'seqid': chr }
                               ,{isBaseLayer:false}
                                            ));
                map.addLayer( new OpenLayers.Layer.Genomic( "salk-tome expression" , tome
                              ,{'seqid': chr }
                               ,{isBaseLayer:false}
                                            ));

            }

}

function updateSliderPosition() {
	var pos_obj = map.getCenter();
	var pos = pos_obj.lon;
	$('#slider').slider('value',pos);
}

        function mapMouseDown(e){
//        	  $('#short_anno_popup').hide(0);
            map.lastMouseX = e.xy.x;
            map.lastMouseY = e.xy.y;
        }
        function mapMouseUp(e){
            var tx = e.xy.x;
            var ty = e.xy.y;
            var tot = Math.abs(map.lastMouseX - tx)
                + Math.abs(map.lastMouseY - ty);
            if(4 > tot){
                // dont need to figure out basepairs from pixels
                // just use the ones in the window already.
                if(pageObj.getseq < 3)
                 {
                    pageObj.getseq++;
                    var pos = parseInt(bp.element.innerHTML);
        	    update_grab(pos);
        	 }
        	else
 		 {
                  query(parseInt(bp.element.innerHTML));
                 }
            }
        }

function mapMouseOut(e) {
	if (pageObj.time) clearTimeout(pageObj.time);
}

	function mapMouseMove(e) {
	  if ($('#popup_anno').is(':checked') == false) return;
	  if (pageObj.time) clearTimeout(pageObj.time);
	  if (parseInt(bp.element.innerHTML) <= 0) return;
       var mouse_x = e.pageX;
       var mouse_y = e.pageY;
       pageObj.time = setTimeout("info_popup()",100);
     }

     function info_popup(position_str) {
       var url = 'FeatAnno.pl?chr='+ chr + '&version='+version+'&org='+org+'&loc='
       + parseInt(bp.element.innerHTML) +'&ds='+ds+'&dsg='+dsg+'&gstid='+gstid+'&name_only='+1;
       jfetch(url,'short_anno_popup');
       $('#short_anno_popup').dialog('open');
     }

        function updateZoom(){
            $('#resolution').innerHTML = map.getResolution() + 'bp/pixel';

        }
        function query(x){
           var url = 'FeatAnno.pl?chr='
           + chr + '&version='+version+'&org='+org+'&loc='
           + x+'&ds='+ds+'&dsg='+dsg+'&gstid='+gstid;
	   $('#query_popup').html(' ');
           jfetch(url,'query_popup');
           $('#query_popup').dialog('open');
         }

 function onEnter(e){
  if (!e){
   var e = window.event;}
  if(e.which == 13){
    $('#map').css('width',$('#width').val());
    updateZoom();}
}

 function update_grab(pos){
  var val = $('#grab_from').val();
  grab_sequence(['args__'+pos,'args__'+val],[insert_grab_vals]);
}

 function insert_grab_vals(from,to){
  if(pageObj.getseq*1 -1 == 1){
    $('#grab_from').css('backgroundColor','white').val(to);
    $('#grab_to').css('backgroundColor','FFFF66');
  }
  else{
  $('#grab_from').val(from);
  $('#grab_to').css('backgroundColor','white').val(to);
  }
 }

function launch_seqview(dsid, chr, gstid, dsgid)
{
   start = $('#grab_from').val();
   stop = $('#grab_to').val();
   if (stop > 0) {window.open("SeqView.pl?dsid="+dsid+"&dsgid="+dsg+"&chr="+chr+"&start="+start+"&stop="+stop+"&gstid="+gstid);}
   else {alert("stop position is: "+stop)};
}

function launch_featlist(dsid, chr, gstid, dsgid)
{
   start = $('#grab_from').val();
   stop = $('#grab_to').val();
   if (stop > 0) {window.open("FeatList.pl?dsid="+dsid+"&dsgid="+dsg+"&chr="+chr+"&start="+start+"&stop="+stop+"&gstid="+gstid);}
   else {alert("stop position is: "+stop)};
}

function change_gene_model_type()
{
   var goods = [genes, wobble_GC_usage];
   for (var i in goods)
   {
      if ($('#flat_models').is(':checked') == true)
       {
         goods[i].params.layers +=',flat';
       }
      else
       {
         goods[i].params.layers = goods[i].params.layers.replace(',flat','');
       }
      if ($('#overlap_models').is(':checked') == true)
       {
         goods[i].params.layers +=',olc';
       }
      else
       {
         goods[i].params.layers = goods[i].params.layers.replace(',olc','');
       }
	   goods[i].redraw();
    }
}

function go_save_options() {
	var show_gc =gc.visibility;
	var show_gaga =gaga.visibility;
	var show_gbox =gbox.visibility;
	var show_genes =genes.visibility;
	var show_wobblegc =wobble_GC_usage.visibility;
	//var show_wobble50gc =wobble_GC_usage_first_50.visibility;
	var show_localdup =local_dup.visibility;
	var show_funcdomain =func_domain.visibility;
	var show_prot =prot.visibility;
	save_options([
	'args__flat','args__'+$('#flat_models').is(':checked'),
	'args__expand','args__'+$('#overlap_models').is(':checked'),
	'args__popupanno','args__'+$('#popup_anno').is(':checked'),
	'args__gc','args__'+show_gc,
	'args__gaga','args__'+show_gaga,
	'args__gbox','args__'+show_gbox,
	'args__genes','args__'+show_genes,
	'args__wobblegc','args__'+show_wobblegc,
	//'args__wobble50gc','args__'+show_wobble50gc,
	'args__localdup','args__'+show_localdup,
	'args__funcdomain','args__'+show_funcdomain,
	'args__prot','args__'+show_prot,
	],[]);
}

function moveMap(){
	 var mypos= $('#slider').slider("value");
	 map.setCenter(OpenLayers.BasePair(mypos));
}

function panMap(){
	 var mypos= $('#slider').slider("value");
	 map.panTo(OpenLayers.BasePair(mypos));
}

function getURLParameter(name) {
    return decodeURI(
        (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search)||[,null])[1]
    );
}

var jbrowse;
var jbrowseIniting = false;
var genomeViewIniting = false;
$(function() {
	$.ajaxSetup({
		type: "POST",
		url: "<TMPL_VAR NAME=PAGE_NAME>",
		dataType: "html",
		cache: false,
	});

	$('#select_view').change(function() {
		var viewer = $(this).find("option:selected").val();
		if (viewer != 'JBrowse') {
			$('#jbrowse').hide();
			$('#main').show();
			$('#resize').show();

			if (!map && !genomeViewIniting) {
				genomeViewIniting = true;

				pageObj.getseq = 3;
				$('#width').val($('#main').width());
				$('#map').css('width',$('#width').val());
				init_GenomeView();
				change_gene_model_type();
				$(".dialog_box").dialog({ autoOpen: false, width: 500  });
				<TMPL_IF NAME="SHOW_LEGEND">$('.legend').toggle();</TMPL_IF>
				<TMPL_IF NAME="MAIZEGDB">$('#maizegdb_popup').dialog('open');</TMPL_IF>

				$('#slider').slider({
					orientation: 'horizontal',
					max: <TMPL_VAR NAME="CHR_LENGTH">,
					value: <TMPL_VAR NAME="LOC">,
					slide: moveMap,
					change: panMap,
					stop: panMap,
				});

				genomeViewIniting = false;
			}
		}
		else {
			$(".dialog_box").dialog('close');
			$('#main').hide();
			$('#resize').hide();
			$('#jbrowse').show();
			if (!jbrowse && !jbrowseIniting) {
				jbrowseIniting = true;

				//var height = $(document).height() - 230; // not working
				//$('#jbrowse').height(height)
				$('#jbrowse').html('<img src="picts/ajax-loader.gif"> Loading ...');

				// Initialize JBrowse widget
				init_JBrowse('jbrowse',
					function(browser) {
						jbrowse = browser;
						jbrowseIniting = false;
					}
				);
			}
		}
	});

	var viewer = getURLParameter('viewer');
	$('#select_view').val(viewer).change();
});
</script>

<span>Viewer:
	<select id='select_view'>
		<option value="JBrowse" selected>JBrowse</option>
		<option value="GenomeView">GenomeView</option>
	</select>
</span>

<span id="resize" style="display:none">
	<span>Window Width: <input type=textbox class=backbox size=4 id="width" onkeypress="onEnter(event);" value=<TMPL_VAR NAME="width"> /><span class="small">px</span></span>
	<span class='ui-button ui-corner-all ui-button-icon-left' onclick="$('#map').css('width',$('#width').val());updateZoom();"><span class="ui-icon ui-icon-arrow-2-e-w"></span>Resize</span>
	<span class='ui-button ui-corner-all ui-button-icon-left' onclick="$('#map').css('width',''+$('#main').width());updateZoom();"><span class="ui-icon ui-icon-arrow-4-diag"></span>Full-Window</span>
</span>

<div id="main" style="display:none">
	<div id="map" style="background-color:#FFFFFF"></div>
	<div id='resolution'></div>
	<div id ='alert_grab'></div>
	<div id="slider" class='ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all'>
		<a class="ui-slider-handle ui-state-default ui-corner-all" href="#"><span class="ui-icon ui-icon-transferthick-e-w"></span></a>
	</div>
	<br>
	<div style="float:left">
		<span class='ui-button ui-corner-all ui-button-icon-left' onclick="$('#set_range').show(0);$('#grab_seq').show();$('#extract_feat').hide();$('#grab_from').css('backgroundColor','FFFF66');pageObj.getseq=1;"><span class="ui-icon ui-icon-scissors"></span>Grab Sequence</span>
		<span class='ui-button ui-corner-all ui-button-icon-left' onclick="$('#set_range').show(0);$('#extract_feat').show();$('#grab_seq').hide();$('#grab_from').css('backgroundColor','FFFF66');pageObj.getseq=1;"><span class="ui-icon ui-icon-scissors"></span>Extract Features</span>
		<span class='ui-button ui-corner-all ui-button-icon-left' onclick="$('#genome_info_popup').html('Loading. . .');get_genome_info(['args__dsgid', 'args__<TMPL_VAR NAME=DSG>'],['genome_info_popup']);$('#genome_info_popup').dialog('open');"><span class="ui-icon ui-icon-newwin"></span>Genome Info</span>
		<br>
		<span id="set_range" style="display:none" >
			<input type=text id='grab_from' value='0'> to <input type='text' id="grab_to" value='0'>
		</span>
		<span id="grab_seq" style="display:none" class='ui-button ui-corner-all' onClick="launch_seqview('<TMPL_VAR NAME=DS>','<TMPL_VAR NAME=CHR>','<TMPL_VAR NAME=GSTID>','<TMPL_VAR NAME=DSG>')"> View Sequence</span>
		<span id="extract_feat" style="display:none" class='ui-button ui-corner-all' onClick="launch_featlist('<TMPL_VAR NAME=DS>','<TMPL_VAR NAME=CHR>','<TMPL_VAR NAME=GSTID>','<TMPL_VAR NAME=DSG>')">Get Features</span>
	</div>
	<div align="right">
	    <TMPL_IF NAME="SAVE_SETTINGS">
	    <span align="right" class='ui-button ui-corner-all ui-button-icon-left' id="SaveSettings" onclick="go_save_options();"><span class="ui-icon ui-icon-disk"></span>Save Settings</span>
	    </TMPL_IF>
	</div>
    <div align="right">Flat Gene Models<input type=checkbox name=flat_models id=flat_models onclick="change_gene_model_type();" <TMPL_VAR NAME=FLAT> /></div>
    <div align="right" >Expand Overlapping Gene Models<input type=checkbox name=overlap_models id=overlap_models onclick="change_gene_model_type();" <TMPL_VAR NAME=EXPAND> /></div>
    <div id='check' style="float:right">Pop-up Annotations<input type=checkbox name="popup_anno" id="popup_anno" <TMPL_VAR NAME=POPUPANNO> /></div>
	<span class="legend ui-button ui-corner-all" onclick="$('.legend').toggle()">Show Legend</span>
	<span class="legend ui-button ui-corner-all" style="display:none" onclick="$('.legend').toggle()">Hide Legend</span>
	<div class="legend" style="display:none">
		<TMPL_IF NAME="MAIZEGDB">
			<span class="ui-button ui-corner-all" onclick="$('#maizegdb_popup').dialog('open')">Maize Researcher Information</span><br>
		</TMPL_IF>
		<img width="600" src="/CoGe/picts/GenomeView-legend.png">
		<br>
		<TMPL_IF NAME="GEVO_LINK_LAYER">
			<img width="600" src="/CoGe/picts/GenomeView_GEvo-links.png">
			<br>
			<span class="small">GenomeView showing glyphs for links to GEvo. These glyphs are blue "links" and are displayed when a genomic feature has a link to GEvo for syntenic analysis of syntelogs.</span>
			<br>
		</TMPL_IF>
	</div>
	<span class="ui-button ui-corner-all" onclick="window.open('/wiki/index.php?title=GenomeView_examples')">More Legend Information</span>
	<span class="ui-button ui-corner-all" onclick="window.open('/wiki/index.php?title=GenomeView')">More GenomeView Help</span>
</div>

<div id="jbrowse" style="display:none; height:80%; width:100%; padding:0; border:1px solid gray"></div>

<div id="short_anno_popup" class="dialog_box" title="Feature Quick Look:" style="display:none"></div>
<div id='query_popup' class="dialog_box" title="Features:" style="display:none"></div></div>
<div id="genome_info_popup" class="dialog_box" title="Genome Information" style="display:none"></div>

<div id="maizegdb_popup" class="dialog_box" title="Welcome Maize Genome Researcher" style="display:none">
   You can identify maize genes with syntenic matches in sorghum by looking for GEvo link icons:<br>
<div style="text-align:center"><img src="./picts/GEvo_link_icon.png" style="text-align:center"></div>  <br>If you don't see this above or below your gene, try zooming out and scanning left and right.  There is an example of what these look like in the legend below.<br><br>
<span class="link" onclick=window.open("/wiki/index.php/Syntenic_gene_sets#Sorghum_and_Maize")>Page where you can download the entire maize-sorghum syntenic gene-set (plus other syntenic data-sets)</span>
<br>
<br>
If this is your first time visiting, you may find these documents helpful:<br>
   <li>For more information on how MaizeGDB and CoGe work together: <span class="link" onclick=window.open('http://genomevolution.org/wiki/index.php/MaizeGDB_and_CoGe')>MaizeGDB-CoGe</span>
   <li>For more information on how Maize-Sorhgum comparative genomics using CoGe: <span class="link" onclick=window.open('http://genomevolution.org/wiki/index.php/Maize_Sorghum_Syntenic_dotplot')>Maize-Sorghum and CoGe</span>
</div>
