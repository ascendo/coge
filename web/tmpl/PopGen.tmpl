<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.10/css/jquery.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.1.0/css/buttons.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="/js/vendor/chosen/chosen.min.css"/>
<style>
	#chromosomes_chosen { white-space: nowrap; }
</style>
<script type="text/javascript" src="https://cdn.datatables.net/1.10.10/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.1.0/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.1.0/js/buttons.colVis.min.js"></script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script src="/js/vendor/chosen/chosen.jquery.min.js"></script>
<script>
var columns = {};
var data;
var dt;
function build_select(s, obj, first) {
	s.empty();
	var keys = [];
	for (key in obj)
		keys.push(key);
	keys.sort(natural_sort);
	if (first)
		s.append('<option>' + first + '</option>');
	for (var i=0; i<keys.length; i++)
		s.append('<option>' + keys[i] + '</option>');
	s.trigger('chosen:updated');
	s.next().css('width','auto');
}
function do_export() {
	var url = '?eid=';
	url += get_param('eid');
	url += '&type=';
	url += $('#types option:selected').text();
	url += '&chr=';
	url += $('#chromosomes option:selected').text();
	url += '&export=';
	var i = 0;
	var first = true;
	while (true) {
		var c = $('#col' + i);
		if (!c.length)
			break;
		if (c.is(':checked')) {
			if (first)
				first = false;
			else
				url += ',';
			url += 'col' + i;
		}
		++i;
	}
	if (url.substring(url.length - 1) == '=')
		alert('You must select at least one column to export.');
	else {
		window.open(url);
		$('#export_dialog').dialog('close');
	}
}
function do_plot() {
	var cols = $('#plot_columns option:selected');
    $('#plot').empty();
    if (cols.length) {
        $('#plot').css('display','block');
        var series = [];
        for (var i=0; i<cols.length; i++) {
	        var d = get_plot_data(cols[i].value);
	        var x = [];
	        var y = [];
	        var text = [];
	        for (var row=0; row<d.length; row++) {
	        	x.push(d[row][0]);
	        	y.push(d[row][1]);
	        	text.push(d[row][2]);
	        }
	        series.push({ mode: 'markers', name: cols[i].text, text: text, x: x, y: y });
        }
        Plotly.newPlot( $('#plot')[0], series, { hovermode: 'closest', margin: { t: 0 }}, { displayModeBar: false });
    }
}
function export_dialog() {
	var d = $('#export_columns');
	d.empty();
	var cols = columns[$('#types option:selected').text()];
	for (var i=0; i<cols.length; i++)
		d.append('<input id="col' + i + '" type="checkbox" checked> ' + cols[i] + '<br>');
	$('#export_dialog').dialog({
		autoOpen:true,
		position: {
			my: "top",
			at: "top",
			of: window
		},
		resizable: false
	});
}
function get_param(name) {
    var search = decodeURIComponent(window.location.search.substring(1));
    var nvp = search.split('&');
    for (var i=0; i<nvp.length; i++)
    	if (nvp[i].substring(0, name.length) == name)
    		return nvp[i].substring(name.length + 1);
};
function get_plot_data(index) {
	var a = [];
	var type = $('#types option:selected').text();
	var chromosome = $('#chromosomes option:selected').text();
	if (chromosome == 'All chromosomes') {
		var arrays = [];
		for (var key in data[type]) {
			var d = data[type][key];
			if (d)
				for (var i=0; i<d.length; i++)
					a.push([(d[i][2]+d[i][3])/2,d[i][index],d[i][1]]);
		}
	} else {
		var d = data[type][chromosome];
		for (var i=0; i<d.length; i++)
			a.push([(d[i][2]+d[i][3])/2,d[i][index],d[i][1]]);
	}
	a.sort(function(a,b){return a[0]-b[0];});
	return a;
}
function natural_sort(a, b) {
    var re = /(^([+\-]?(?:\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[\da-fA-F]+$|\d+)/g,
        sre = /^\s+|\s+$/g,   // trim pre-post whitespace
        snre = /\s+/g,        // normalize all whitespace to single ' ' character
        dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
        hre = /^0x[0-9a-f]+$/i,
        ore = /^0/,
        i = function(s) {
            return (natural_sort.insensitive && ('' + s).toLowerCase() || '' + s).replace(sre, '');
        },
        // convert all to strings strip whitespace
        x = i(a) || '',
        y = i(b) || '',
        // chunk/tokenize
        xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
        yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
        // numeric, hex or date detection
        xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && Date.parse(x)),
        yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
        normChunk = function(s, l) {
            // normalize spaces; find floats not starting with '0', string or 0 if not defined (Clint Priest)
            return (!s.match(ore) || l == 1) && parseFloat(s) || s.replace(snre, ' ').replace(sre, '') || 0;
        },
        oFxNcL, oFyNcL;
    // first try and sort Hex codes or Dates
    if (yD) {
        if ( xD < yD ) { return -1; }
        else if ( xD > yD ) { return 1; }
    }
    // natural sorting through split numeric strings and default strings
    for(var cLoc=0, xNl = xN.length, yNl = yN.length, numS=Math.max(xNl, yNl); cLoc < numS; cLoc++) {
        oFxNcL = normChunk(xN[cLoc] || '', xNl);
        oFyNcL = normChunk(yN[cLoc] || '', yNl);
        // handle numeric vs string comparison - number < string - (Kyle Adams)
        if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
        // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
        else if (typeof oFxNcL !== typeof oFyNcL) {
            oFxNcL += '';
            oFyNcL += '';
        }
        if (oFxNcL < oFyNcL) { return -1; }
        if (oFxNcL > oFyNcL) { return 1; }
    }
    return 0;
}
function parse_data(d) {
	data = {};
	var chromosome;
	var type;
	var i = d.indexOf('\n');
	var start = 0;
	while (i != -1) {
		var l = d.substring(start, i);
		var tokens = l.split('\t');
		if (l.charAt(0) == '#') {
			if (tokens.length > 1) {
				type = tokens[0].substring(1);
				data[type] = {};
				tokens.shift();
				columns[type] = tokens;
			} else {
				chromosome = tokens[0].substring(1);
				data[type][chromosome] = [];
			}
		} else
			data[type][chromosome].push(tokens);
		start = i + 1;
		i = d.indexOf('\n', start);
	}
	build_select($('#types'), data);
	set_chromosomes();
	set_data();
}
function plot_dialog() {
    $('#plot_dialog').dialog('destroy');
	$('#plot_dialog').dialog({
		autoOpen: true,
		open: function() {
		    $('#plot').empty();
		    var s = $('#plot_columns');
		    s.empty();
		    var cols = columns[$('#types option:selected').text()];
		    for (var i=4; i<cols.length; i++)
		        s.append('<option value="' + i + '">' + cols[i] + '</option>');
		    if ($('#plot_columns_chosen').length)
		    	s.trigger('chosen:updated');
		    else
			    s.chosen({ placeholder_text_multiple: 'Select column(s) to plot' });
		},
		height: $(window).height() - 20,
		position: {
			my: "center top",
			at: "center top",
			of: window
		},
		resizable: false,
		width:$(window).width() - 30
	});
}
function ready() {
	$('#types').chosen({disable_search_threshold: 10});
	$('#chromosomes').chosen();
	var eid = get_param('eid');
	$.get('data/popgen/' + eid + '/sumstats.tsv', null, parse_data, 'text');
}
function set_chromosomes() {
	build_select($('#chromosomes'), data[$('#types option:selected').text()], 'All chromosomes');
}
function set_data() {
	var type = $('#types option:selected').text();
	var chromosome = $('#chromosomes option:selected').text();
	var d;
	if (chromosome == 'All chromosomes') {
		var arrays = [];
		for (var key in data[type]) {
			d = data[type][key];
			if (d)
				arrays.push(d);
		}
		d = [].concat.apply([], arrays);
	} else
		d = data[type][chromosome];
	var c = [];
	for (var i=0; i<columns[type].length; i++)
		c.push({'title': columns[type][i]});
	dt = $('#main').DataTable({buttons:[{extend:'colvis',text:'columns'}],columns:c,data:d,scrollX:true,lengthChange:false,order:[],ordering:false,pageLength:500,searching:false});
	dt.buttons().container().appendTo($('#colvis'));
	$('#busy').hide();
}
function chromosome_changed() {
	$('#busy').show();
	dt.destroy();
	$('#main').empty();
	setTimeout(set_data,10);
}
$(document).ready(ready);
</script>
<div id="busy" class="spinner" style="display:block;text-align:center;"></div>
<div style="margin-left:14px;margin-top:20px;">View:
<select id="types" onchange="set_chromosomes();chromosome_changed();"></select>
<select id="chromosomes" onchange="chromosome_changed();"></select>
<div id="colvis" style="display:inline-block;vertical-align:bottom;"></div>
    <span onclick="export_dialog()" class="ui-button ui-corner-all coge-button">Export...</span>
    <span onclick="plot_dialog();" class="ui-button ui-corner-all coge-button">Plot...</span>
</div>
<style>
    th { text-align: left; }
    a.dt-button { padding: 5px 1em !important; }
    div.dt-button-collection { width: auto !important; }
</style>
<table id="main" class="compact display" style="margin:initial;">
	<tbody></tbody>
</table>
<div style="height:75px"></div>
<div id="export_dialog" class="dialog_box hidden" title="Export">
Select columns to export
<div id="export_columns">
</div>
<span onclick="do_export()" class="r ui-button ui-corner-all coge-button">Export</span>
</div>
<div id="plot_dialog" class="dialog_box hidden" title="Plot" style="display:none">
<div style="height:100%;display:flex;flex-flow:column;">
	<div style="flex: 0 1 auto;">
		<select id="plot_columns" multiple onchange="do_plot();" style="width:100%;"></select>
	</div>
	<div id="plot" style="flex: 1 1 auto;"></div>
</div>
</div>
