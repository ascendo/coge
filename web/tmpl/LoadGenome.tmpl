<TMPL_IF NAME='MAIN'>
<script type="text/javascript" src="js/coge/utils.js"></script>
<SCRIPT type="text/javascript" src="./js/jquery.fileupload.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./js/jstree/jquery.jstree.js"></SCRIPT>

<style type="text/css">
.jstree li a ins { display:none !important; }
.jstree.jstree-focused { background:white; }
</style>

<SCRIPT type="text/javascript">
const STATUS_URL = '<TMPL_VAR NAME="STATUS_URL">';
const PAGE_NAME  = '<TMPL_VAR NAME="PAGE_NAME">';
const ENTREZ_URL = '//eutils.ncbi.nlm.nih.gov/entrez/eutils/';

var timestamps = new Array();
var load_id    = '<TMPL_VAR NAME="LOAD_ID">'; // required by FileSelect.tmpl
var job_id     = '<TMPL_VAR NAME="JOB_ID">';
var genome_id;

$(document).ready(function(){
	// Configure jQuery ajax
	$.ajaxSetup({
		type: "GET",
		url: PAGE_NAME,
		dataType: "html",
		cache: false
	});

	// Configure dialogs
    $(".dialog_box").dialog({autoOpen: false, width: 500});
    $('#load_dialog').dialog("widget").find('.ui-dialog-titlebar-close').hide();
    $('#load_dialog').dialog({modal: true, closeOnEscape: false})

  	// Initialize drop-downs
	get_sequence_types();
	get_sources();
	$("#edit_organism").autocomplete({
		source: [],
		focus: function() { return false; },
		select:
		   	function(event, ui) {
		   		$("#edit_organism")
		   			.val( ui.item.label )
		   			.data('organism_id', ui.item.value);
		   		return false;
			}
	});

	// Open status dialog for existing load
    if (job_id) {
        $('#loading_msg').hide();
        $('#load_dialog').dialog('open');
        update_dialog(STATUS_URL + job_id, "#load_dialog", progress_formatter);
    }
});

function file_selected(filename, url) {
	$('#file_select_dialog').dialog('close');
	$('#files_clear').removeClass('ui-state-disabled');
}

function get_sequence_types(id) {
	$.ajax({
		data: {
			fname: 'get_sequence_types'
		},
		success : function(html) {
			$('#select_type').html(html);
			if (id) {
				$('#select_type').val(id);
			}
		}
	});
}

function create_sequence_type() {
	var name = $('#edit_type_name').val();
	var desc = $('#edit_type_desc').val();
	$.ajax({
		data: {
			fname: 'create_sequence_type',
			name: name,
			desc: desc,
		},
		success : function(id) {
			$('#create_new_type_dialog').dialog('close');
			if (id) {
				get_sequence_types(id);
			}
		}
	});
}

function create_source() {
	var name = $('#edit_source_name').val();
	var desc = $('#edit_source_desc').val();
	var link = $('#edit_source_link').val();
	$.ajax({
		data: {
			fname: 'create_source',
			name: name,
			desc: desc,
			link: link,
		},
		success : function(name) {
			$('#create_new_source_dialog').dialog('close');
			if (name) {
				$('#edit_source').val(name);
			}
		}
	});
}

function create_organism() {
	if ($('#create_organism_button').hasClass('ui-state-disabled')) {
		return;
	}

	var name = $('#edit_organism_name').val();
	if (!name) {
		alert('Please specify the organism name.');
		return;
	}

	var desc = $('#edit_organism_desc').val();
	if (!desc) {
		alert('Please specify the organism description.');
		return;
	}
	if (desc.split(';').length < 2) {
		alert('Please specify an NCBI taxonomy of classes separated\nby semicolons for the organism description.');
		return;
	}

	$.ajax({
		data: {
			fname: 'create_organism',
			name: name,
			desc: desc,
		},
		success : function(organism_id) {
			if (organism_id) {
				$('#create_new_organism_dialog').dialog('close');
				$('#edit_organism').val(name).data("organism_id", organism_id);
			}
		}
	});
}

function reset_log() {
	$('#load_log').html('');
	$('#loading_msg').show();
	$('#finished_msg,#error_msg,#ok_button').hide();
	$('#finish_button,#cancel_button').hide();
}

function check_login() {
	var logged_in = false;

	$.ajax({
		async: false,
		data: {
			fname: 'check_login',
		},
		success : function(rc) {
			logged_in = rc;
		}
	});

	return logged_in;
}

function load_genome() {
	// Validate data items
	var items = get_selected_files();
	if (items == null) {
		alert('Files are still being transferred, please wait.');
		return;
	}
	else if (items.length == 0) {
		alert('Please select some sequence files by clicking "Add Sequence Files".');
		return;
	}

	// Prevent mix of NCBI and file data types
	var types = {};
	items.forEach(function(item) { types[item.type] = 1; });
	var isNCBI = 'ncbi' in types;
	if (Object.keys(types).length > 1 && isNCBI) {
		alert('Cannot mix NCBI data with other types.');
		return;
	}

	// Validate other input fields
	var organism_name = $('#edit_organism').val();
	var organism_id = $('#edit_organism').data("organism_id");
	if (!isNCBI && (!organism_id || !organism_name)) {
		alert('Organism not found.');
		return;
	}

	var version = $('#edit_version').val();
	if (!isNCBI && !version) {
		alert('Please specify a genome version.');
		return;
	}

	var source = $('#edit_source').val();
	if (!isNCBI && !source) {
		alert('Please specify a data source.');
		return;
	}

	var user_name = $('#edit_user').val(); // only exists if admin
	var keep_headers = $('#keep_headers').is(':checked'); // only exists if admin
	var name = $('#edit_name').val();
	var description = $('#edit_description').val();
	var link = $('#edit_link').val();
	var type_id = $('#select_type').val();
	var restricted = $('#restricted').is(':checked');
	var json = JSON.stringify(items);

	// Prevent concurrent executions - issue 101
	if ( $("#load_dialog").dialog( "isOpen" ) )
		return;

	// Make sure user is still logged-in - issue 206
	if (!check_login()) {
		alert('Your session has expired, please log in again.');
		location.reload(true)
		return;
	}

	// Open status dialog right away - issue 101
	reset_log();
	$('#load_dialog').dialog('open');
	$('#load_log').html('Initializing ...');

	$.ajax({
		data: {
			fname: 'load_genome',
			load_id: load_id,
			name: name,
			description: description,
			link: link,
			version: version,
			type_id: type_id,
			restricted: restricted,
			organism_id: organism_id,
			source_name: source,
			user_name: user_name,
			keep_headers: keep_headers,
			items: json,
			timestamp: new Date().getTime()
		},
		success : function(data) {
			var obj = jQuery.parseJSON(data);
			if (obj && obj.error) {
				alert(obj.error);
				return;
			}

			// Set link in status dialog
			$('#loading_msg span a').attr('href', obj.link).html(obj.link);

			// Start status update
            if (obj.job_id) { // JEX status for load FASTQ
                job_id = obj.job_id;
                window.history.pushState({}, "Title", PAGE_NAME + "?job_id=" + obj.job_id); // Add job_id to browser URL
                update_dialog(STATUS_URL + obj.job_id, "#load_dialog", progress_formatter);
            }
		}
		// TODO: handle error, show in status dialog
	});
}

function get_load_log(callback) {
    $.ajax({
        data: {
            dataType:    'text',
            fname:       'get_load_log',
            workflow_id: job_id,
            timestamp:   new Date().getTime()
        },
        success : function(data) {
            if (callback) {
            	var obj = jQuery.parseJSON(data);
                callback(obj);
                return;
            }
        }
    });
}
//function get_load_log() {
//	$.ajax({
//		data: {
//			dataType: 'text',
//			fname: 'get_load_log',
//			load_id: load_id
//		},
//		success : function(data) {
//			if (!data) { // workaround for issue #45, jquery intermittently dropping payload
//				setTimeout(function() { get_load_log(); }, 1000);
//				return;
//			}
//
//			var obj = jQuery.parseJSON(data);
//			if (obj.log) {
//				$('#load_genome_log').html(obj.log.join('<BR>'));
//				var height = $('#load_genome_log')[0].scrollHeight;
//	    		$("#load_genome_log").animate({ scrollTop: height}, 500);
//    		}
//
//			if (obj.status == 1) {  // finished successfully
//				// Update load_id in case user reuses page to load again
//				load_id = obj.new_load_id;
//
//				$('#genome_id').val( obj.genome_id );
//				$('#loading_msg').hide();
//				$('#finished_msg').fadeIn();
//				$('#ok_button').fadeIn();
//				$('#finish_load_genome_button').fadeIn();
//			}
//			else if (obj.status == -1) { // error occurred
//				$('#loading_msg').hide();
//				$('#error_msg').fadeIn();
//				$('#cancel_load_genome_button').fadeIn();
//			}
//			else { // not done yet, continue polling
//				setTimeout(function() { get_load_log(); }, 1000);
//			}
//		}
//	});
//}

function load_failed(obj) {
	// Handle special case of genbank load of existing genome
	if ( obj && obj.links && obj.links.length ) {
		var link_text = obj.links.reduce(function(prev, cur) {
				return prev + '<a href="' + cur + '" target=_new>' + cur + '</a>' + '<br>';
			},
			'<b>Cannot load because the data already exist in the system:</b><br>');
		var log = $('#load_log');
		log.html( log.html() + link_text );
	}
	else { // mdb added 6/24/14 - temporary message until JEX logging is improved
		var msg =
			'<div class="alert">' +
			'We recently made some changes that limit our ability to report errors (more details <a href="https://genomevolution.org/wiki/index.php/Jex_Logging" target=_blank>here</a>). ' +
			'While we fix this please feel free to contact us at <a href="mailto:coge.genome@gmail.com">coge.genome@gmail.com</a> regarding this failure to load data ' +
			'and we can help to determine the cause.  Thanks!' +
			'</div>';
		var log = $('#load_log');
		log.html( log.html() + msg );
	}

    // Update dialog
    $('#loading_msg').hide();
    $('#error_msg').fadeIn();
    $('#cancel_button').fadeIn();

    $.ajax({
        data: {
            fname: "send_error_report",
            load_id: load_id,
            job_id: job_id
        }
    });
}

function load_succeeded(obj) {
    // Update globals
    genome_id = obj.genome_id; // for continuing to GenomeInfo

    // Update dialog
    $('#loading_msg').hide();
    $('#finished_msg,#finish_button,#ok_button').fadeIn();
}

function reset_load() {
	clear_list();
    window.history.pushState({}, "Title", PAGE_NAME);
    $('#load_dialog').dialog('close');
}

function continue_to_view() {
	window.location.href = "GenomeInfo.pl?gid=" + genome_id;
}

function wait_to_search (search_func, search_term) {
	pageObj.search_term = search_term;

	if (pageObj.time) {
		clearTimeout(pageObj.time);
	}

	// FIXME: could generalize by passing select id instead of separate search_* functions
	pageObj.time = setTimeout(
		function() {
			search_func(pageObj.search_term);
		},
		500
	);
}

function search_organisms (search_term) {
	if (search_term.length > 2) {
		timestamps['search_organisms'] = new Date().getTime();
		$.ajax({
			data: {
				fname: 'search_organisms',
				search_term: search_term,
				timestamp: timestamps['search_organisms']
			},
			success : function(data) {
				var obj = jQuery.parseJSON(data);
				if (obj && obj.items && obj.timestamp == timestamps['search_organisms']) {
					$("#edit_organism").autocomplete({source: obj.items}).autocomplete("search");
				}
			},
		});
	}
}

function search_users (search_term) {
	timestamps['search_users'] = new Date().getTime();
	$.ajax({
		data: {
			fname: 'search_users',
			search_term: search_term,
			timestamp: timestamps['search_users']
		},
		success : function(data) {
			var obj = jQuery.parseJSON(data);
			if (obj && obj.items && obj.timestamp == timestamps['search_users']) {
				$("#edit_user").autocomplete({source: obj.items});
				$("#edit_user").autocomplete("search");
			}
		},
	});
}

function get_sources () {
	$.ajax({
		data: {
			fname: 'get_sources',
		},
		success : function(data) {
			var obj = jQuery.parseJSON(data);
			if (obj) {
				$("#edit_source").autocomplete({source: obj});
			}
		},
	});
}

function more() {
	$('#more').hide();
	$('#edit_name,#edit_description,#edit_link').closest('tr').fadeIn();
}

function build_taxonomy_tree(items) {
	if (items) {
		var tree = $("#tax_tree");
		if (items.length == 0) {
			tree.slideUp('fast',
				function() {
					tree.empty();
					$('#tax_empty').fadeIn();
					$('#edit_organism_name').val('');
					$('#edit_organism_desc').val('');
					activate_on_input(['edit_organism_name', 'edit_organism_desc'], 'create_organism_button');
				}
			);
		}
		else {
			var list = $('<ul></ul>');
			items.sort(sort_name).forEach(
				function(e) {
					var id = 'taxon' + e.id;
					$(list)
						.append('<li id="' + id + '" name="' + e.name + '">' +
								'<a href="#">' + e.name + '</a></li>');
					//tree.jstree("create_node", null, "last", {attr: {id: id}, data: e.name})
				}
			);
			tree.empty()
				.append(list)
				.jstree()
					.bind("select_node.jstree",
				      	function (event, data) {
							var id = data.rslt.obj.attr("id");
							taxonomy_get_node(id);
						}
					)
				.slideDown();
		}
	}
	else {
		$('#ncbi_result').html('<i>No result</i>');
		$('#create_organism_button').addClass('ui-state-disabled');
	}
}

//TODO break this out into a widget/plugin
function search_ncbi_taxonomy(search_term) {
	if (!search_term || search_term.length < 3) {
		return;
	}

	$("#wait_ncbi").animate({opacity:1});
	$('#tax_empty').fadeOut();
	$("#edit_organism_info").slideUp();

	$.get(
		ENTREZ_URL + "esearch.fcgi?db=taxonomy&term=" + search_term + "*",
		function(xml) {
			var ids;
			$(xml).find("Id").each(
				function() {
					ids += $(this).text() + ',';
				}
			);

			if (ids) {
				$.get(
					ENTREZ_URL + "efetch.fcgi?db=taxonomy&id=" + ids,
					function(xml) {
						var results = new Array();

						$(xml).children("Taxon").each(
							function() {
								var id = $(this).children('TaxId').text();
								var name = $(this).children('ScientificName').text();
								var lineage = $(this).children('Lineage').text();
								results.push({id: id, name: name, lineage: lineage});
							}
						);

						build_taxonomy_tree(results);

						$("#wait_ncbi").animate({opacity:0});
					}
				);
			}
			else {
				var tree = $("#tax_tree");
				tree.slideUp('fast',
					function() {
						tree.empty();
						$('#tax_empty').fadeIn();
						$('#edit_organism_name').val('');
						$('#edit_organism_desc').val('');
						activate_on_input(['edit_organism_name', 'edit_organism_desc'], 'create_organism_button');
					}
				);

				$("#wait_ncbi").animate({opacity:0});
			}
		}
	);
}

function taxonomy_get_node(id) { // FIXME: cleanup and merge common stuff with search_ncbi_taxonomy
	var tree = $("#tax_tree");
	var node = $("#"+id);
	var name = $(node).attr('name');

	// If the node is open then it has children so just
	// close the node and return.
	var is_open = tree.jstree("is_open", node);
	if (is_open) {
		tree.jstree("close_node", node);
		return;
	}

	// If not a leaf node then we already retreived the children so
	// just open the node and return.
	var is_leaf = tree.jstree("is_leaf", node);
	if (!is_leaf) {
		tree.jstree("open_node", node);
		return;
	}

	// Retrieve the children for this taxon.
	$("#wait_ncbi").animate({opacity:1});

	$.get(
		ENTREZ_URL + "esearch.fcgi?db=taxonomy&term=" + name + "&field=nxlv",
		function(xml) {
			var ids;
			$(xml).find("Id").each(
				function() {
					ids += $(this).text() + ',';
				}
			);

			if (ids) {
				$.get(
					ENTREZ_URL + "efetch.fcgi?db=taxonomy&id=" + ids,
					function(xml) {
						var results = new Array();

						$(xml).children("Taxon").each(
							function() {
								var id = $(this).children('TaxId').text();
								var name = $(this).children('ScientificName').text();
								var lineage = $(this).children('Lineage').text();
								results.push({id: id, name: name, lineage: lineage});
							}
						);

						if (results.length) {
							results.sort(sort_name).forEach(
								function(e) {
									tree.jstree("create_node", node, "last", {attr: {id: 'taxon'+e.id, name: e.name}, data: e.name})
										.data("lineage", e.lineage);
								}
							);
							tree.jstree("open_node", node);
						}

						$("#wait_ncbi").animate({opacity:0});
					}
				);
			}
			else {
				var lineage = node.data("lineage");
				$("#edit_organism_name").val(name);
				$("#edit_organism_desc").val(lineage);
				activate_on_input(['edit_organism_name', 'edit_organism_desc'], 'create_organism_button');
				$("#edit_organism_info").slideDown();

				$("#wait_ncbi").animate({opacity:0});
			}
		}
	);

}

function sort_name (a,b) {
	var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
	if (nameA < nameB) //sort string ascending
		return -1
	if (nameA > nameB)
		return 1
	return 0 //default return value (no sorting)
}

function progress_formatter(item) {
    var msg;
    var row = $('<li>'+ item.description + ' </li>');
    row.addClass('small');

    var job_status = $('<span></span>');

    if (item.status == 'scheduled')
        job_status.append(item.status).addClass('down bold');
    else if (item.status == 'completed')
        job_status.append(item.status).addClass('completed bold');
    else if (item.status == 'running')
        job_status.append(item.status).addClass('running bold');
    else if (item.status == 'skipped')
        job_status.append("already generated").addClass('skipped bold');
    else if (item.status == 'cancelled')
        job_status.append(item.status).addClass('alert bold');
    else if (item.status == 'failed')
        job_status.append(item.status).addClass('alert bold');
    else
        return;

    row.append(job_status);

    if (item.elapsed)  {
        row.append(" in " + coge.utils.toPrettyDuration(item.elapsed));
    }

    return row;
}

function update_dialog(request, identifier, formatter) {
    var get_status = function () {
        $.ajax({
            type: 'GET',
            url: request,
            dataType: 'json',
            success: update_callback,
            error: update_callback,
        });
    };

    var update_callback = function(json) {
        var dialog = $(identifier);
        var workflow_status = $("<p></p>");
        var data = $("<ul></ul>");
        var results = [];
        var current_status;
        var timeout = 2000;

        var callback = function() {
            update_dialog(request, identifier, formatter);
        }

        if (json.error) {
            pageObj.error++;
            if (pageObj.error > 3) {
                workflow_status.html('<span class=\"alert\">The job engine has failed.</span>');
                load_failed();
                return;
            }
        } else {
            pageObj.error = 0;
        }

        if (json.status) {
            current_status = json.status.toLowerCase();
            workflow_status.html("Workflow status: ");
            workflow_status.append($('<span></span>').html(json.status));
            workflow_status.addClass('bold');
        } else {
            setTimeout(callback, timeout);
            return;
        }

        if (json.jobs) {
            var jobs = json.jobs;
            for (var index = 0; index < jobs.length; index++) {
                var item = formatter(jobs[index]);
                if (item) {
                    results.push(item);
                }
            }
        }

        if (!dialog.dialog('isOpen')) {
            return;
        }

        //FIXME Update when a workflow supports elapsed time
        if (current_status == "completed") {
            var total = json.jobs.reduce(function(a, b) {
                if (!b.elapsed) return a;

                return a + b.elapsed;
            }, 0);

            var duration = coge.utils.toPrettyDuration(total);

            workflow_status.append("<br>Finished in " + duration);
            workflow_status.find('span').addClass('completed');
            get_load_log(function(result) {
                load_succeeded(result);
            });

        }
        else if (current_status == "failed"
                || current_status == "error"
                || current_status == "terminated"
                || current_status == "cancelled")
        {
            workflow_status.find('span').addClass('alert');
            get_load_log(function(result) {
                load_failed(result);
            });
        }
        else if (current_status == "notfound") {
            setTimeout(callback, timeout);
            return;
        }
        else {
            workflow_status.find('span').addClass('running');
            setTimeout(callback, timeout);
        }

        results.push(workflow_status);
        data.append(results);
        dialog.find('#load_log').html(data);
    };

    get_status();
}

</SCRIPT>

<span style="color:dimgray;font-weight:bold;">Genome Info</span><br>
<table class="small ui-widget-content ui-corner-all">
  <tr>
    <td>Organism:</td>
    <td>
      <tmpl_if name=ORGANISM_NAME>
        <input id="edit_organism" type="search" placeholder="Search" onkeyup="wait_to_search(search_organisms, this.value);" value="<tmpl_var name=ORGANISM_NAME>"size="50" spellcheck="false" />
      <tmpl_else>
        <input id="edit_organism" type="search" placeholder="Search" onkeyup="wait_to_search(search_organisms, this.value);" size="50" spellcheck="false" />
      </tmpl_if>
      <span id="new_organism_button" onClick="$('#create_new_organism_dialog').dialog('open'); activate_on_input('edit_organism_name', 'create_organism_button');" class='ui-button ui-corner-all'>New</span>
    </td>
  </tr>
  <tr>
    <td>Version:</td>
    <td><input id="edit_version" type="textbox" size="10" spellcheck="false" /></td>
  </tr>
  <tr>
    <td>Type:</td>
    <td>
      <select id="select_type" style="width:230px;"></select>
      <span id="new_type_button" onClick="$('#create_new_type_dialog').dialog('open'); activate_on_input('edit_type_name', 'create_type_button');" class='ui-button ui-corner-all'>New</span>
    </td>
  </tr>
  <tr>
    <td>Source:</td>
    <td>
      <input id="edit_source" type="search" placeholder="Search" size="50" spellcheck="false" />
      <span id="new_source_button" onClick="$('#create_new_source_dialog').dialog('open'); activate_on_input('edit_source_name', 'create_source_button');" class='ui-button ui-corner-all'>New</span>
    </td>
  </tr>
  <tr>
    <td>Restricted?</td>
    <td><input id="restricted" type="checkbox" checked></td>
  </tr>
  <tr id='more'>
    <td colspan="2"><span class="link" onclick="more();">more...</span></td>
  </tr>
  <tr class="hidden">
    <td>Name:</td>
    <td><input id="edit_name" type="textbox" placeholder="Optional" size="58" spellcheck="false" /></td>
  </tr>
  <tr class="hidden">
    <td>Description:</td>
    <td><textarea id="edit_description" placeholder="Optional" rows="5" cols="50" ></textarea></td>
  </tr>
  <tr class="hidden">
    <td>Link:</td>
    <td><input id="edit_link" type="textbox" placeholder="Optional" size="58" /></td>
  </tr>
</table>

<br>
<span id='genome_data' style="color:dimgray;font-weight:bold;">Genome Data</span><br>
<div class="small info" style="width:550px;">
  Click the <b>Add Data</b> button to select the data items to be loaded for the genome from:
  1) iPlant Data Store, 2) FTP/HTTP site, 3) browser upload, and 4) NCBI.
  For 1-3, only sequence FASTA files can be loaded at this stage.  GFF annotation files can be loaded later on.
  For 4, both sequence and annotation associated with the specified accession are loaded.
  </div>
<span onClick="$('#file_select_dialog').dialog('open')" class='ui-button ui-corner-all'>Add Data</span>
<span id="files_clear" onClick="clear_list();" class='ui-state-disabled ui-button ui-corner-all'>Clear List</span>
<table id='file_table' class="hidden small ui-widget-content ui-corner-all" style="margin-top:5px;margin-bottom:5px;"></table>
<br>
<br>
<br>
<span id="load_genome_button" onDblClick="load_genome();" onClick="load_genome();" style="font-size:1em;float-right;" class='ui-button ui-corner-all ui-button-go'>Load Genome</span>
<br>
<br>
<br>
<br>
<br>

<div id="create_new_type_dialog" class="hidden dialog_box" title="Create New Sequence Type">
  <table class="small">
    <tr>
      <td>Name:</td>
      <td><input id="edit_type_name" type="textbox" size="53" onkeyup="activate_on_input('edit_type_name', 'create_type_button');" /></td>
    </tr>
    <tr>
      <td>Description:</td>
      <td><textarea id="edit_type_desc" rows="5" cols="50" ></textarea></td>
    </tr>
  </table>
  <br>
  <span id="create_type_button" onClick="create_sequence_type();" class="ui-state-disabled ui-button ui-corner-all">Create new type</span>
</div>

<div id="create_new_organism_dialog" class="hidden dialog_box" title="Create New Organism">
	<div class ="small info" style="padding-top:10px;">
		Please select an organism from NCBI's Taxonomy database.  If your organism does not exist,
		find the nearest relative and modify the name and description fields accordingly.
	</div>
	<div style="padding-top:10px;">
    	<span class="small">Search NCBI:</span>
    	<input type="textbox" size="45" spellcheck="false" onkeyup="wait_to_search(search_ncbi_taxonomy, this.value);" />
	    <img id="wait_ncbi" src="picts/ajax-loader.gif" style="opacity: 0;" />
	</div>
	<div id="tax_empty" class="hidden small" style="font-style:italic;color:gray;margin-top:15px;margin-left:20px;">No matches</div>
	<div id="tax_tree" class="hidden small" style="border:1px solid lightgray;margin-top:5px;max-height:200px;max-width:415px;overflow-y:auto">
	</div>
	<div id="edit_organism_info" class="hidden" style="padding-top:15px;">
		<span class="small">You have selected:</span><br>
		<table style="color:gray;">
			<tr>
				<td class="small" style="font-weight:bold;">Name</td>
				<td>
					<input id="edit_organism_name" type="textbox" size="54" spellcheck="false" style="color:gray;background-color:white;" onkeyup="activate_on_input(['edit_organism_name', 'edit_organism_desc'], 'create_organism_button');" />
				</td>
			</tr>
			<tr>
				<td class="small" style="font-weight:bold;">Description</td>
				<td>
					<textarea id="edit_organism_desc" rows="5" cols="57" spellcheck="false" style="color:gray;resize:none;border:1px solid lightgray;" onkeyup="activate_on_input(['edit_organism_name', 'edit_organism_desc'], 'create_organism_button');"></textarea>
				</td>
			</tr>
		</table>
	</div>
  <br>
  <span id="create_organism_button" onClick="create_organism();" class="ui-state-disabled ui-button ui-corner-all ui-button-go">Create</span>
</div>

<div id="create_new_source_dialog" class="hidden dialog_box" title="Create New Source">
  <table class="small">
    <tr>
      <td>Name:</td>
      <td><input id="edit_source_name" type="textbox" size="53" onkeyup="activate_on_input('edit_source_name', 'create_source_button');" /></td>
    </tr>
    <tr>
      <td>Description:</td>
      <td><textarea id="edit_source_desc" rows="5" cols="50" ></textarea></td>
    </tr>
    <tr>
      <td>Link:</td>
      <td><input id="edit_source_link" type="textbox" size="53" /></td>
    </tr>
  </table>
  <br>
  <span id="create_source_button" onClick="create_source();" class="ui-state-disabled ui-button ui-corner-all ui-button-go">Create</span>
</div>

<div id="load_dialog" class="hidden dialog_box" title="Loading Genome ...">
  <div id="load_log" class="small padded ui-widget-content ui-corner-all" style="overflow-y:auto;width:450px;height:200px;color:dimgray;">
  </div>
  <br>
  <div id="loading_msg">
    <span class="small" style="float:right;">Link: <a></a></span>
    Please wait ... <img src="picts/ajax-loader.gif"/>
  </div>
  <span id="finished_msg" class="hidden">Finished! <img src="picts/thumbs_up.png"></span>
  <span id="error_msg" class="hidden">An error occurred <img style="vertical-align:text-top" src="picts/thumbs_down.png"></span>
  <span id="ok_button" onClick="reset_load();" style="float:right;" class="hidden ui-button ui-corner-all">Load Another</span>
  <span id="finish_button" onClick="continue_to_view();" style="float:right;" class="hidden ui-button ui-corner-all">Continue to GenomeInfo</span>
  <span id="cancel_button" onClick="reset_load();" style="float:right;" class="hidden ui-button ui-corner-all ui-button-go">Cancel</span>
</div>

<div id="file_select_dialog" class="hidden dialog_box" title="Select Data File ...">
  <TMPL_INCLUDE NAME='widgets/FileSelect.tmpl'>
  <span onClick="$('#file_select_dialog').dialog('close');" style="float:right;" class="ui-button ui-corner-all">Done</span>
</div>

<TMPL_IF NAME='ADMIN_AREA'>
<script>
$(document).ready(function() {
	$("#edit_user").autocomplete({
		source:[],
		focus: function() { return false; },
	});
});
</script>
<br><br><hr>
<span style="color:dimgray;font-weight:bold;">Admin Functions</span><br>
<table class="small ui-widget-content ui-corner-all">
  <tr>
    <td>Assign to user</td>
    <td>
      <input id="edit_user" type="search" placeholder="search" onkeyup="wait_to_search(search_users, this.value);" size="10" />
    </td>
  </tr>
  <tr>
  	<td>Keep section headers</td>
  	<td>
  		<input id="keep_headers" type="checkbox" />
  	</td>
  </tr>
</table>
<br>
</TMPL_IF>

</TMPL_IF> <!-- MAIN -->

<TMPL_IF NAME='LOGIN'>
	<TMPL_INCLUDE NAME="widgets/Login.tmpl">
</TMPL_IF>
