<TMPL_IF NAME="MAIN">
<script src="./js/coge/utils.js"></script>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.tablesorter.2.0.3.js"></SCRIPT>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.tablesorter.pager.js"></SCRIPT>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.fileupload.js"></SCRIPT>
<SCRIPT language="JavaScript">

const STATUS_URL = '<TMPL_VAR NAME="STATUS_URL">';
const PAGE_NAME = '<TMPL_VAR NAME="PAGE_NAME">';

var eid = '<TMPL_VAR NAME="EID">';
var job_id = '<TMPL_VAR NAME="JOB_ID">';

$(document).ready(function() {
    pageObj = new Object();
    pageObj.timers = new Array();

    $.ajaxSetup({
        type: "GET",
        url: PAGE_NAME,
        dataType: "html",
        cache: false,
    });

    $(".dialog_box").dialog({autoOpen: 0, width: 450});

    $("#progress_dialog").dialog({modal: true});

    $("#edit_type_name").autocomplete({
        source: function() { get_experiment_types(); },
        select: function(event, ui) { get_type_description( ui.item.label ); }
    });

    set_annotation_table();

    init_annotation_dialog(eid, '<TMPL_VAR NAME="DEFAULT_TYPE">');
    
    // Open status dialog
    if (job_id) {
        $('#progress_msg').hide();
        $('#progress_dialog').dialog({ autoOpen: true, title: "Finding SNPs ..." });
        update_dialog(STATUS_URL + job_id, "#progress_dialog", progress_formatter);
    }
});

function set_annotation_table() {
    $('#experiment_annotation_table').tablesorter({widgets: ['zebra']});
}

function get_experiment_info() {
    $.ajax({
        data: {
            fname: 'get_experiment_info',
            eid: eid,
        },
        success : function (data) {
            $('#experiment_info').html(data);
        }
    });
}

function edit_experiment_info() {
    $.ajax({
        data: {
            fname: 'edit_experiment_info',
            eid: eid,
        },
        success : function(data) {
            var obj = jQuery.parseJSON(data);
            $("#experiment_info_edit_box").html(obj.output).dialog('open');
        },
    });
}

function update_experiment_info (){
    var name = $('#edit_name').val();
    if (!name) {
        alert('Please specify a name.');
        return;
    }

    var version = $('#edit_version').val();
    if (!version) {
        alert('Please specify a version');
        return;
    }

    var source_id = parseInt( $('#edit_source_id').val() );
    if (!source_id) {
        alert('Please specify a source');
        return;
    }

    var desc = $('#edit_desc').val();

    $.ajax({
        data: {
            fname: 'update_experiment_info',
            eid: eid,
            name: name,
            desc: desc,
            source_id: source_id,
            version: version
        },
        success : function(val) {
            get_experiment_info();
            $("#experiment_info_edit_box").dialog('close');
        }
    });
}

function get_sources () {
    $.ajax({
        data: {
            fname: 'get_sources'
        },
        success : function(data) {
            var items = jQuery.parseJSON(data);
            $("#edit_source").autocomplete("option", "source", items).autocomplete("search");
        }
    });
}

function make_experiment_public () {
    $.ajax({
        data: {
            fname: 'make_experiment_public',
            eid: eid
        },
        success : function(val) {
            get_experiment_info();
        }
    });
}

function make_experiment_private () {
    $.ajax({
        data: {
            fname: 'make_experiment_private',
            eid: eid
        },
        success : function(val) {
            get_experiment_info();
        }
    });
}

function add_experiment_type () {
    $.ajax({
        data: {
            fname: 'add_experiment_type',
            eid: eid
        },
        success : function(data) {
            $("#experiment_type_edit_box").dialog({
                beforeClose:
                    function() {
                        $("#edit_type_name").autocomplete('close');
                    }
            });
            $("#experiment_type_edit_box").html(data).dialog('open');
        }
    });
}

function add_type_to_experiment () {
    var name = $('#edit_type_name').val();
    var description = $('#edit_type_description').val();

    if (name) {
        $.ajax({
            data: {
                fname: 'add_type_to_experiment',
                eid: eid,
                name: name,
                description: description
            },
            success : function(val) {
                get_experiment_info();
                $("#experiment_type_edit_box").dialog('close');
            },
        });
    }
    else { alert ('Error: Must have type name specified!');}
}

function reset_dialog() {
    $('#progress_msg').show();
    $('#finished_msg,#error_msg,#custom_msg,#ok_button').hide();
}

function reset_load() {
	$('#progress_dialog').dialog('close');
	window.history.pushState({}, "Title", PAGE_NAME + "?eid=" + eid);
}

function download_files() {
    $("#progress_dialog")
        .unbind()
        .dialog("option", "title", "Preparing Download");

    // Prevent concurrent executions
    if ( $("#progress_dialog").dialog( "isOpen" ) )
        return;

    //CLEAR DIALOG
    reset_dialog();

    // Open status dialog right away
    $('#progress_dialog').dialog('open');
    $('#progress_log').html(
            "<br>The download is being generated<br><br>" +
            "File: experiment_" + eid + ".tar.gz"
    );

    $.ajax({
        data: {
            fname: "get_file_urls",
            eid: eid
        },
        dataType: "json",
        success : function(json) {
            if (json.files) {  // finished successfully
                $('#progress_msg').hide();
                $('#finished_msg').fadeIn();
                $('#ok_button').fadeIn();

                $("#progress_dialog").on("dialogclose", function(ui, event) {
                    json.files.forEach(coge.utils.open);
                });
            }
            else { // error occurred
                $('#progress_msg').hide();
                $('#finished_msg').hide();
                $('#error_msg').fadeIn();
                $('#ok_button').fadeIn();
            }
        }
    });
}

function export_data() {
    // Prevent concurrent executions
    if ( $("#progress_dialog").dialog( "isOpen" ) )
        return;

    // Make sure user is still logged-in
    if (!check_and_report_login())
        return;

    //CLEAR DIALOG
    reset_dialog();

    // Open status dialog right away
    $('#progress_dialog')
        .unbind()
        .dialog({ autoOpen: true, title: "Exporting ..."});

    $('#progress_log').html(
            "<br>Copying this experiment's data files to <br><br>" +
            '<a class="bold" target="_blank" href="http://data.iplantcollaborative.org/"><TMPL_VAR NAME=IRODS_HOME></a>'
    );

    $.ajax({
        data: {
            fname: 'export_experiment_irods',
            eid: eid
        },
        success : function(filename) {
            if (filename) {  // finished successfully
                $('#progress_msg').hide();
                $('#finished_msg').fadeIn();
                $('#ok_button').fadeIn();
                $('#progress_log').append('<br><br>File: ' + filename);
            }
            else { // error occurred
                $('#progress_msg').hide();
                $('#finished_msg').hide();
                $('#error_msg').fadeIn();
                $('#ok_button').fadeIn();
            }
        }
    });
}

function find_snps() {
    // Prevent concurrent executions
    if ( $("#progress_dialog").dialog( "isOpen" ) )
        return;

    // Make sure user is still logged-in
    if (!check_and_report_login())
        return;

    // Clear dialog
    reset_dialog();

    // Open status dialog right away
    $('#progress_dialog')
        .unbind()
        .dialog({ autoOpen: true, title: "Finding SNPs ..." });

    $('#progress_log').html('Initializing ...');

    $.ajax({
        data: {
            fname: 'find_snps',
            eid: eid,
            timestamp: new Date().getTime()
        },
        success : function(data) {
            var obj = jQuery.parseJSON(data);
            if (obj && obj.error) {
                alert(obj.error);
                return;
            }

            // Set link in status dialog
            $('#progress_msg span a').attr('href', obj.link).html(obj.link);

            // Start status update
            if (obj.job_id) { // JEX status for load FASTQ
                job_id = obj.job_id;
                window.history.pushState({}, "Title", PAGE_NAME + "?eid=" + eid + "&job_id=" + obj.job_id); // Add job_id to browser URL
                update_dialog(STATUS_URL + obj.job_id, "#progress_dialog", progress_formatter);
            }
        }
        // TODO: handle error, show in status dialog
    });
}

function update_dialog(request, identifier, formatter) {
    var get_status = function () {
        $.ajax({
            type: 'GET',
            url: request,
            dataType: 'json',
            success: update_callback,
            error: update_callback,
        });
    };

    var update_callback = function(json) {
        var dialog = $(identifier);
        var workflow_status = $("<p></p>");
        var data = $("<ul></ul>");
        var results = [];
        var current_status;
        var timeout = 2000;

        var callback = function() {
            update_dialog(request, identifier, formatter);
        }
        
        if (json.error) {
            pageObj.error++;
            if (pageObj.error > 3) {
                workflow_status.html('<span class=\"alert\">The job engine has failed.</span>');
                progress_failed();
                return;
            }
        } else {
            pageObj.error = 0;
        }

        if (json.status) {
            current_status = json.status.toLowerCase();
            workflow_status.html("Workflow status: ");
            workflow_status.append($('<span></span>').html(json.status));
            workflow_status.addClass('bold');
        } else {
            setTimeout(callback, timeout);
            return;
        }

        if (json.jobs) {
            var jobs = json.jobs;
            for (var index = 0; index < jobs.length; index++) {
                var item = formatter(jobs[index]);
                if (item) {
                    results.push(item);
                }
            }
        }

        if (!dialog.dialog('isOpen')) {
            return;
        }

        //FIXME Update when a workflow supports elapsed time
        if (current_status == "completed") {
            var total = json.jobs.reduce(function(a, b) {
                if (!b.elapsed) return a;
                return a + b.elapsed;
            }, 0);

            var duration = coge.utils.toPrettyDuration(total);

            workflow_status.append("<br>Finished in " + duration);
            workflow_status.find('span').addClass('completed');
            get_progress_log(function(result) {
                progress_succeeded(result);
            });
        }
        else if (current_status == "failed"
                || current_status == "error"
                || current_status == "terminated"
                || current_status == "cancelled")
        {
            workflow_status.find('span').addClass('alert');
            get_progress_log(function(result) {
            	progress_failed(result);
            });
        }
        else if (current_status == "notfound") {
            setTimeout(callback, timeout);
            return;
        }
        else {
            workflow_status.find('span').addClass('running');
            setTimeout(callback, timeout);
        }

        results.push(workflow_status);
        data.append(results);
        dialog.find('#progress_log').html(data);
    };

    get_status();
}

function progress_formatter(item) {
    var msg;
    var row = $('<li>'+ item.description + ' </li>');
    row.addClass('small');

    var job_status = $('<span></span>');

    if (item.status == 'scheduled') {
        job_status.append(item.status);
        job_status.addClass('down');
        job_status.addClass('bold');
    } else if (item.status == 'completed') {
        job_status.append(item.status);
        job_status.addClass('completed');
        job_status.addClass('bold');
    } else if (item.status == 'running') {
        job_status.append(item.status);
        job_status.addClass('running');
        job_status.addClass('bold');
    } else if (item.status == 'skipped') {
        job_status.append("already generated");
        job_status.addClass('skipped');
        job_status.addClass('bold');
    } else if (item.status == 'cancelled') {
        job_status.append(item.status);
        job_status.addClass('alert');
        job_status.addClass('bold');
    } else if (item.status == 'failed') {
        job_status.append(item.status);
        job_status.addClass('alert');
        job_status.addClass('bold');
    } else {
        return;
    }

    row.append(job_status);

    if (item.elapsed)  {
        row.append(" in " + coge.utils.toPrettyDuration(item.elapsed));
    }

    return row;
}

function progress_failed(obj) {
    // Update dialog
    $('#progress_msg').hide();
    if (obj && obj.status == -2 && obj.message) {
    	$('#custom_msg').html(obj.message).fadeIn();
    }
    else {
    	$('#error_msg').fadeIn();
    }
    $('#ok_button').fadeIn();
    	
    $.ajax({
        data: {
            fname: "send_error_report",
            job_id: job_id
        }
    });
}

function progress_succeeded(obj) {
    // Update globals
    experiment_id = obj.experiment_id;  // for continuing to ExperimentView
    
    // Update dialog
    $('#progress_msg').hide();
    $('#finished_msg').fadeIn();
    $('#ok_button').fadeIn();
    { // normal experiment load
        $('#experiment_view_button')
            .html('ExperimentView').fadeIn()
            .unbind().on('click', function() {
                window.location.href = "ExperimentView.pl?eid=" + experiment_id;
        });
    }
}

function get_progress_log(callback) {
    $.ajax({
        data: {
            dataType: 'text',
            fname: 'get_progress_log',
            workflow_id: job_id,
            timestamp: new Date().getTime()
        },
        success : function(data) {
            if (callback) {
            	var obj = jQuery.parseJSON(data);
                callback(obj);
                return;
            }
        }
    });
}

function check_login() {
    var logged_in = false;

    $.ajax({
        async: false,
        data: {
            fname: 'check_login'
        },
        success : function(rc) {
            logged_in = rc;
        }
    });

    return logged_in;
}

function check_and_report_login() {
    if (!check_login()) {
        alert('Your session has expired, please log in again.');
        location.reload(true);
        return false;
    }
    return true;
}

function remove_experiment_type (opts) {
    etid = opts.etid;
    $.ajax({
        data: {
            fname: 'remove_experiment_type',
            eid: eid,
            etid: etid,
        },
        success : function(val) {
            get_experiment_info();
        },
    });
}

function get_annotations() {
    $.ajax({
        data: {
            fname: 'get_annotations',
            eid: eid,
        },
        success : function(data) {
            $('#experiment_annotations').html(data);
            set_annotation_table();
        }
    });
}

function remove_annotation (eaid) {
    $.ajax({
        data: {
            fname: 'remove_annotation',
            eid: eid,
            eaid: eaid,
        },
        success : function() {
            get_annotations();
        },
    });
}

function get_experiment_types () {
    $.ajax({
        data: {
            fname: 'get_experiment_types'
        },
        success : function(val) {
            var items = jQuery.parseJSON(val);
            $("#edit_type_name").autocomplete("option", "source", items).autocomplete("search");
        },
    });
}

function get_type_description (name) {
    $.ajax({
        data: {
            fname: 'get_type_description',
            name: name
        },
        success : function(data) {
            $("#edit_type_description").html(data);
        },
    });
}
</SCRIPT>

<table>
	<tr style="vertical-align:top">
		<td>
			<div>
			    <div style="color:dimgray;font-weight:bold;">Info</div>
			    <div id='experiment_info' class="inline">
			        <TMPL_VAR NAME="EXPERIMENT_INFO">
			    </div>
			</div>
		</td>
		<td>
			<div style="padding-left:10px; padding-bottom:10px;">
			    <div style="color:dimgray;font-weight:bold;">Statistics</div>
			    <div class="small inline top">
			        <ul class="ui-widget-content ui-corner-all" style="padding: 2px;">
			            <li>
			                <span class="title5">Rows:</span>
			                <span class="data5"><tmpl_var name=rows><span>
			            </li>
			        </ul>
			    </div>
			</div>
			<div style="padding-left: 10px;">
			    <div style="color:dimgray;font-weight:bold;">Tools</div>
			    <table class="small inline top ui-widget-content ui-corner-all">
			        <tr>
			            <td>
			                <span class="title5">Download:</span>
			            </td>
			            <td>
			                <span class="data5 link" onclick="download_files();">Experiment Data</span>
			            </td>
			        </tr>
                    <TMPL_UNLESS NAME="PUBLIC">
			        <tr>
			            <td>
			                <span class="title5">iPlant Data Store:</span>
			            </td>
			            <td>
			            	<span class="data5 link" ondblclick="export_data()" onclick="export_data()">Export Data</span>
		                </td>
		            </tr>
                    </TMPL_UNLESS>
		            <TMPL_IF NAME="ALIGNMENT_TYPE">
		            <tr>
		                <td>
			                <span class="title5">Analyze:</span>
			            </td>
			            <td>
			                <span class="data5 link" ondblclick="find_snps()" onclick="find_snps()">Find SNPs</span>
		                </td>
			        </tr>
			        </TMPL_IF>
			    </table>
		    </div>
		</td>
	</tr>
</table>
<br>

<TMPL_IF NAME="EXPERIMENT_ANNOTATIONS">
<div>
 <div style="color:dimgray;font-weight:bold;">Metadata</div>
 <div id="experiment_annotations">
  <TMPL_VAR NAME="EXPERIMENT_ANNOTATIONS">
 </div>
</div>
</TMPL_IF>

<div id="experiment_info_edit_box" class="dialog_box" title="Edit Experiment Info" style="display:none;"></div>

<div id="experiment_type_edit_box" class="dialog_box" title="Add Experiment Type" style="display:none;">
  <table class="small">
   <tr>
    <td>Name:</td>
    <td><input id="edit_type_name" size="53" value=""></td>
   </tr>
   <tr valign="top">
    <td>Description:</td>
    <td><textarea id="edit_type_description" rows="5" cols="50"></textarea></td>
   </tr>
  </table>
  <span onClick="add_type_to_experiment();" class='ui-button ui-corner-all'>Add</span>
</div>

<div id="progress_dialog" class="hidden dialog_box">
    <div id="progress_log" class="small padded ui-widget-content ui-corner-all" style="overflow-y:auto;width:415px;height:200px;color:dimgray;">
    </div>
    <br>
    <span id="progress_msg">Please wait ... <img src="picts/ajax-loader.gif"/></span>
    <span id="finished_msg" class="hidden">Finished! <img src="picts/thumbs_up.png"></span>
    <span id="custom_msg" class="hidden"></span>
    <span id="error_msg" class="hidden">An error occurred <img style="vertical-align:text-top" src="picts/thumbs_down.png"></span>
    <span id="ok_button" onClick="reset_load();" class="hidden r ui-button ui-corner-all">OK</span>
    <span id="experiment_view_button" class="hidden r ui-button ui-corner-all">ExperimentView</span>
</div>

<TMPL_INCLUDE NAME='widgets/AddAnnotation.tmpl'> <!-- Add/Edit Annotation Dialog -->

</TMPL_IF>



<TMPL_IF NAME="EDIT_EXPERIMENT_INFO">
<SCRIPT>
$(function() {
    $("#edit_source").autocomplete({
        source:
            function() {
                get_sources();
            },
        select:
            function(event, ui) {
                $("#edit_source").val( ui.item.label );
                $("#edit_source_id").val( ui.item.value );
                return false;
            }
    });
});
</SCRIPT>
<table class="small">
 <tr>
  <td>Name:</td>
  <td><input id="edit_name" type="textbox" size="53" value="<TMPL_VAR NAME='NAME'>"></td>
 </tr>
 <tr>
  <td>Description:</td>
  <td><textarea id="edit_desc" rows="5" cols="50"><TMPL_VAR NAME='DESC'></textarea></td>
 </tr>
 <tr>
  <td>Source:</td>
  <td>
   <input id="edit_source" size="53" value="<TMPL_VAR NAME='SOURCE'>">
   <input id="edit_source_id" type="hidden" value="<TMPL_VAR NAME='SOURCE_ID'>">
  </td>
 </tr>
 <tr>
  <td>Version:</td>
  <td><input id="edit_version" type="textbox" size="53" value="<TMPL_VAR NAME='VERSION'>"></td>
 </tr>
</table>
<br>
<span onClick="update_experiment_info();" class='ui-button ui-corner-all'>Update</span>
</TMPL_IF>
