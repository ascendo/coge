#!/usr/bin/perl -w

use strict;
use Data::Dumper;
use CoGeX;
use Getopt::Long;

use vars qw($coge $GO $dsid $file $master);

GetOptions("go=i"=>\$GO,
	   "file=s"=>\$file,
	   "master=i"=>\$master,
	  );

my $GZIP = "gzip";
my $GUNZIP = "gunzip";

unless ($file)
  {
    print qq{
Usage:  $0 -file <syntenic pairs file from synmap> -master 1 -go 1

This program will auto-extract syntenic gene pairs from a synmap file using
their CoGe database ID.  It will then transfer annotations and names from
the "master" feature to the "slave" feature.

To figure out which is master and which is slave, just run the program without
the -go 1 option.  This will dump a string like:

Master dataset: NC_001623.gbk
Annotations transferred to: AcMNPV_g5.faa

If those are backwards, change the -master from 1 to 2 (or vice versa)

Options:

  -file       syntenic pairs file generated by SynMap

  -master     while is the master in the synmap file (1 or 2)

  -go         set to 1 to actually load stuff into the database

};

    exit;
  }

my $connstr = 'dbi:mysql:dbname=coge;host=genomevolution.org;port=PORT';
my $coge = CoGeX->connect($connstr, 'USER', 'PASSWORD' );
my ($at) = $coge->resultset('AnnotationType')->search({name=>'note'});
my $header_printed = 0;
$master = 1 unless $master;
$file = gunzip($file);
process_file($file);
$file = gzip($file);
my %seen;

sub map_annotations
  {
    my $feat1 = shift;
    my $feat2 = shift;
    #going to map annotations from feat1 to feat2
    ($feat1, $feat2) = ($feat2, $feat1) if $master == 2;
    unless ($header_printed)
      {
	print "Master dataset: ", $feat1->dataset->name,"\n";
	print "Annotations transferred to: ", $feat2->dataset->name,"\n";
	$header_printed = 1;
      }
    print "Mapping ".$feat1->id ." to ".$feat2->id,"\n" if $GO;

    $feat2->add_to_annotations({annotation=>"Annotations mapped from " . $feat1->dataset->name,
				link=>"FeatView.pl?fid=".$feat1->id,
				annotation_type_id=>$at->id,
			       }) if $GO;
    foreach my $fn ($feat1->feature_names)
      {
	$feat2->add_to_feature_names({name=>$fn->name,
				      description=>$fn->description,
				      primary_name=>$fn->primary_name}) if $GO;
      }
    foreach my $anno ($feat1->annos)
      {
	$feat2->add_to_annotations({annotation=>$anno->annotation,
				    link=>$anno->link,
				    annotation_type_id=>$anno->annotation_type_id}) if $GO;
      }
  }

sub process_file
  {
    my $file = shift;
    open (IN, $file);
    while (<IN>)
      {
	next if /^#/;
	chomp;
	next unless $_;
	my @line = split /\t/;
	my @set1 = split/\|\|/, $line[1];
	my @set2 = split/\|\|/, $line[5];
	my $id1 = $set1[6];
	my $id2 = $set2[6];
	my $feat1 = $coge->resultset('Feature')->find($id1);
	my $feat2 = $coge->resultset('Feature')->find($id2);
	next if $seen{$id1};
	map_annotations($feat1, $feat2);
	$seen{$id1} = $id2;
      }
  }

sub gzip
    {
      my $file = shift;
      return $file unless $file;
      return $file.".gz" if -r "$file.gz";
      return $file unless -r $file;
      return $file if $file =~ /\.gz$/;
      `$GZIP $file` if -r $file;
      my $tmp = $file.".gz";
      return -r $tmp ? $tmp : $file;
    }

sub gunzip
    {
      my $file = shift;
      return $file unless $file;
      return $file unless -r $file;
      return $file unless $file =~ /\.gz$/;
      `$GUNZIP $file` if -r $file;
      my $tmp = $file;
      $tmp =~ s/\.gz$//;
      return -r $tmp ? $tmp : $file;
    }
